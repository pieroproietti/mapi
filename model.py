# generated by datamodel-codegen:
#   filename:  metadefender-core.json
#   timestamp: 2024-03-05T16:24:01+00:00

from __future__ import annotations

from typing import Any, Dict, List

from typing_extensions import Literal, NotRequired, TypedDict

UserLogin = TypedDict(
    'UserLogin',
    {
        'oms-csrf-token': str,
        'session_id': str,
    },
)


class PostlicenseKeyRequest(TypedDict):
    activationKey: NotRequired[str]
    quantity: NotRequired[int]
    comment: NotRequired[str]


class LicenseInformation(TypedDict):
    days_left: NotRequired[int]
    deployment: NotRequired[str]
    expiration: NotRequired[str]
    licensed_engines: NotRequired[List[str]]
    max_node_count: NotRequired[str]
    online_activated: NotRequired[bool]
    product_id: NotRequired[str]
    product_name: NotRequired[str]


class AdminConfigSession(TypedDict):
    absoluteSessionTimeout: NotRequired[int]
    allowCrossIpSessions: NotRequired[bool]
    allowDuplicateSession: NotRequired[bool]
    sessionTimeout: NotRequired[int]


DisabledupdateItem = TypedDict(
    'DisabledupdateItem',
    {
        'days': NotRequired[str],
        'from': NotRequired[int],
        'to': NotRequired[int],
    },
)


class AdminConfigUpdate(TypedDict):
    autoupdateperiod: NotRequired[int]
    deleteafterimport: NotRequired[bool]
    disabledupdate: NotRequired[List[DisabledupdateItem]]
    pickupfolder: NotRequired[str]
    source: NotRequired[Literal['internet', 'folder', 'manual']]


class SkipList(TypedDict):
    blacklist: NotRequired[Dict[str, Any]]
    skip: NotRequired[Dict[str, Any]]
    whitelist: NotRequired[Dict[str, Any]]


class SkipListAfterDeleted(TypedDict):
    blacklist: NotRequired[Dict[str, Any]]
    skip: NotRequired[Dict[str, Any]]
    whitelist: NotRequired[Dict[str, Any]]


class AdminConfigWebhook(TypedDict):
    maxretrytime: NotRequired[float]
    delayduration: NotRequired[float]
    delayprogression: NotRequired[float]
    requestqueue: NotRequired[float]
    transfertimeout: NotRequired[float]
    workercount: NotRequired[float]


class FeatureProxyItem(TypedDict):
    exclusion: NotRequired[str]
    id: NotRequired[
        Literal[
            'callbackurl',
            'downloadfrom',
            'license',
            'mdcloud',
            'updateengine',
            'sanitizedurl',
            'ssologin',
            'yara',
        ]
    ]
    port: NotRequired[str]
    server: NotRequired[str]
    use_proxy: NotRequired[Literal[0, 1, 2]]
    username: NotRequired[str]


class ProxyList(TypedDict):
    enabled: NotRequired[bool]
    feature_proxy: NotRequired[List[FeatureProxyItem]]
    exclusion: NotRequired[str]
    port: NotRequired[str]
    server: NotRequired[str]
    username: NotRequired[str]


class ProxyListRequestBody(TypedDict):
    enabled: bool
    feature_proxy: NotRequired[List[FeatureProxyItem]]
    exclusion: NotRequired[str]
    port: str
    server: str
    username: NotRequired[str]
    password: NotRequired[str]


class MissingEnabledField(TypedDict):
    err: NotRequired[str]


class ErrorWhileParsingInputJson(TypedDict):
    err: NotRequired[str]


class MissingPort(TypedDict):
    err: NotRequired[str]


class MissingServerAddress(TypedDict):
    err: NotRequired[str]


class ProxyRequiresAuthentication(TypedDict):
    err: NotRequired[str]


class PostProxyRequest(TypedDict):
    enabled: bool
    exclusion: NotRequired[str]
    port: str
    server: str
    username: NotRequired[str]
    password: NotRequired[str]


class ErrorWhileRequestingConfig(TypedDict):
    err: NotRequired[str]


class InternalServerError(TypedDict):
    err: NotRequired[str]


class AdminConfigFileSync(TypedDict):
    timeout: float


class ErrorWhileModifyingConfig(TypedDict):
    err: NotRequired[str]


class AdminConfigSessioncookie(TypedDict):
    samesite: NotRequired[float]


class IncludeAddress(TypedDict):
    enabled: NotRequired[bool]
    address_str: NotRequired[str]


class SpecifyUsersAgent(TypedDict):
    enabled: NotRequired[bool]
    allowed_users_agent: NotRequired[List[str]]


class AdminConfigCustomResponseHeader(TypedDict):
    include_address: NotRequired[IncludeAddress]
    include_deployment_id: NotRequired[bool]
    specify_users_agent: NotRequired[SpecifyUsersAgent]
    authorized_only: NotRequired[bool]


class Engine(TypedDict):
    id: NotRequired[str]
    display_name: NotRequired[str]


class HealthCheck(TypedDict):
    database: NotRequired[bool]
    enable_feature: NotRequired[bool]
    number_active_av_engines: NotRequired[int]
    engines: NotRequired[List[Engine]]
    license: NotRequired[bool]
    scan_queue: NotRequired[int]


class PostRequestBody(TypedDict):
    enable_feature: NotRequired[bool]
    scan_queue: NotRequired[int]
    number_active_av_engines: NotRequired[int]
    required_engines: NotRequired[List[str]]


class SetRequiredEngineFailedWhenInvalidLicense(TypedDict):
    err: NotRequired[str]


class SetRequiredEngineFailedWhenInvalidEngine(TypedDict):
    err: NotRequired[str]


class UserResponse(TypedDict):
    api_key: NotRequired[str]
    directory_id: NotRequired[int]
    display_name: NotRequired[str]
    email: NotRequired[str]
    name: NotRequired[str]
    roles: NotRequired[List[str]]
    ui_settings: NotRequired[Dict[str, Any]]


class UserRequest(UserResponse):
    password: NotRequired[str]


RolePermissionObject = List[Literal['read', 'write']]


class Rights(TypedDict):
    agents: NotRequired[RolePermissionObject]
    cert: NotRequired[RolePermissionObject]
    configlog: NotRequired[RolePermissionObject]
    engines: NotRequired[RolePermissionObject]
    external: NotRequired[RolePermissionObject]
    license: NotRequired[RolePermissionObject]
    quarantine: NotRequired[RolePermissionObject]
    retention: NotRequired[RolePermissionObject]
    rule: NotRequired[RolePermissionObject]
    scan: NotRequired[RolePermissionObject]
    scanlog: NotRequired[RolePermissionObject]
    skip: NotRequired[RolePermissionObject]
    update: NotRequired[RolePermissionObject]
    updatelog: NotRequired[RolePermissionObject]
    users: NotRequired[RolePermissionObject]
    workflow: NotRequired[RolePermissionObject]
    zone: NotRequired[RolePermissionObject]


class NewUserRoleRequest(TypedDict):
    name: NotRequired[str]
    display_name: NotRequired[str]
    rights: NotRequired[Rights]


class NewUserRoleResponse(NewUserRoleRequest):
    editable: bool
    id: int


class LocalSource(TypedDict):
    source: NotRequired[str]
    state: NotRequired[Literal['disabled', 'enabled']]


class HttpSource(TypedDict):
    source: NotRequired[str]
    state: NotRequired[Literal['disabled', 'enabled']]


class YaraSourcesObject(TypedDict):
    local_sources: NotRequired[List[LocalSource]]
    http_sources: NotRequired[List[HttpSource]]


class BodyAndDownloadLinkGiven(TypedDict):
    err: NotRequired[str]


class CallbackURLInvalid(TypedDict):
    err: NotRequired[str]


class FileUploadRejected(TypedDict):
    err: NotRequired[str]


class DLPRuleMatchResult(TypedDict):
    after: NotRequired[str]
    before: NotRequired[str]
    certainty: NotRequired[Literal['Very Low', 'Low', 'Medium', 'High', 'Very High']]
    certainty_score: NotRequired[int]
    hit: NotRequired[str]
    location: NotRequired[str]
    severity: NotRequired[Literal[0, 1]]
    tryRedact: NotRequired[bool]


class Ccn(TypedDict):
    display_name: NotRequired[str]
    hits: NotRequired[List[DLPRuleMatchResult]]


class Hits(TypedDict):
    ccn: NotRequired[Ccn]


class MetadataRemoval(TypedDict):
    result: NotRequired[Literal['removed', 'not removed', 'failed to remove']]


class Redact(TypedDict):
    result: NotRequired[Literal['redacted', 'not redacted', 'failed to redact']]


class Watermark(TypedDict):
    result: NotRequired[Literal['added', 'not added', 'failed to add']]


class DLPResponse(TypedDict):
    certainty: NotRequired[Literal['Very Low', 'Low', 'Medium', 'High', 'Very High']]
    errors: NotRequired[Dict[str, Any]]
    filename: NotRequired[str]
    hits: NotRequired[Hits]
    metadata_removal: NotRequired[MetadataRemoval]
    redact: NotRequired[Redact]
    severity: NotRequired[Literal[0, 1]]
    verdict: NotRequired[Literal[0, 1, 2, 3, 4]]
    watermark: NotRequired[Watermark]


class DownloadInfo(TypedDict):
    error_detail: NotRequired[str]
    progress: NotRequired[float]
    status: NotRequired[str]
    url: NotRequired[str]


class ExtractionInfo(TypedDict):
    decrypted_status: NotRequired[Literal['Success', 'Failed']]
    err_category: NotRequired[str]
    err_code: NotRequired[int]
    err_details: NotRequired[str]
    is_encrypted_file: NotRequired[bool]


class SignerInfoItem(TypedDict):
    digest_algorithm: NotRequired[str]
    digest_encryption_algorithm: NotRequired[str]
    issuer: NotRequired[str]
    serial_number: NotRequired[str]
    vendor_name: NotRequired[str]
    version: NotRequired[str]


SignerInfo = List[SignerInfoItem]


class FileInformation(TypedDict):
    display_name: NotRequired[str]
    file_size: NotRequired[int]
    file_type: NotRequired[str]
    file_type_description: NotRequired[str]
    md5: NotRequired[str]
    sha1: NotRequired[str]
    sha256: NotRequired[str]
    signer_infos: NotRequired[SignerInfo]
    type_category: NotRequired[
        List[Literal['A', 'D', 'E', 'G', 'I', 'M', 'P', 'T', 'Z', 'O']]
    ]
    receive_data_timestamp: NotRequired[str]
    upload_time: NotRequired[int]
    upload_timestamp: NotRequired[str]


class FileInfo(TypedDict):
    description: str
    encrypted: bool
    extensions: str
    groupID: str
    groupIDs: List[Literal['A', 'D', 'E', 'G', 'I', 'M', 'P', 'T', 'Z', 'O']]
    type: str
    typeID: str
    type_ids: List[str]


class FileTypeResponse(TypedDict):
    file_info: FileInfo
    file_info_details: NotRequired[Dict[str, Any]]
    file_metadata: NotRequired[Dict[str, Any]]
    result_template_hash: NotRequired[str]


class OPSWATFilescanResponse(TypedDict):
    pass


class Details(TypedDict):
    action: NotRequired[Literal['sanitized', 'removed']]
    count: NotRequired[int]
    object_details: NotRequired[List[str]]
    object_name: NotRequired[str]


class Detail(TypedDict):
    action: Literal['sanitized', 'removed']
    count: NotRequired[int]
    details: NotRequired[Details]
    description: NotRequired[str]
    file_name: NotRequired[str]
    object_details: NotRequired[List[str]]
    object_name: str


class SanitizedFileInfo(TypedDict):
    file_size: NotRequired[int]
    sha256: NotRequired[str]


class DeepCDRDetails(TypedDict):
    description: NotRequired[str]
    details: NotRequired[List[Detail]]
    failure_category: NotRequired[str]
    sanitized_file_info: NotRequired[SanitizedFileInfo]


ProcessingResultsStringEnum = Literal[
    'No Threat Detected',
    'Infected',
    'Suspicious',
    'Failed',
    'Whitelisted',
    'Blacklisted',
    'Exceeded Archive Depth',
    'Not Scanned',
    'Encrypted Archive',
    'Exceeded Archive Size',
    'Exceeded Archive File Number',
    'Password Protected Document',
    'Exceeded Archive Timeout',
    'Mismatch',
    'Potentially Vulnerable File',
    'Cancelled',
    'Sensitive Data Found',
    'Yara Rule Matched',
    'Potentially Unwanted',
    'Unsupported File Type',
    'In Progress',
]


ProcessingResultsIndexEnum = Literal[
    0, 1, 2, 3, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 255
]


class AVEngineScanReport(TypedDict):
    def_time: NotRequired[str]
    eng_id: NotRequired[str]
    location: NotRequired[str]
    scan_result_i: NotRequired[int]
    scan_time: NotRequired[int]
    threat_found: NotRequired[str]
    wait_time: NotRequired[int]


class ScanDetails(TypedDict):
    ClamAV: NotRequired[AVEngineScanReport]


class MetascanReport(TypedDict):
    data_id: NotRequired[str]
    progress_percentage: NotRequired[int]
    scan_all_result_a: NotRequired[ProcessingResultsStringEnum]
    scan_all_result_i: NotRequired[ProcessingResultsIndexEnum]
    start_time: NotRequired[str]
    total_avs: NotRequired[int]
    total_time: NotRequired[int]
    scan_details: NotRequired[ScanDetails]


class Product(TypedDict):
    id: NotRequired[int]
    name: NotRequired[str]


class Vendor(TypedDict):
    id: NotRequired[int]
    name: NotRequired[str]


class VersionData(TypedDict):
    count_behind: NotRequired[int]
    feed_id: NotRequired[int]
    version: NotRequired[str]


Cvss = TypedDict(
    'Cvss',
    {
        'access-complexity': NotRequired[str],
        'access-vector': NotRequired[str],
        'authentication': NotRequired[str],
        'availability-impact': NotRequired[str],
        'confidentiality-impact': NotRequired[str],
        'generated-on-epoch': NotRequired[str],
        'integrity-impact': NotRequired[str],
        'score': NotRequired[str],
        'source': NotRequired[str],
    },
)


Details1 = TypedDict(
    'Details1',
    {
        'cpe': NotRequired[str],
        'cve': NotRequired[str],
        'cvss': NotRequired[Cvss],
        'cwe': NotRequired[str],
        'last_modified_epoch': NotRequired[str],
        'published-epoch': NotRequired[str],
        'references': NotRequired[List[str]],
    },
)


class Vulnerabilite(TypedDict):
    description: NotRequired[str]
    details: NotRequired[Details1]
    severity: NotRequired[
        Literal['LOW', 'MODERATE', 'IMPORTANT', 'CRITICAL', 'NOT_AVAILABLE', 'UNKNOWN']
    ]
    severity_index: NotRequired[int]
    static_id: NotRequired[int]


class DetectedProduct(TypedDict):
    has_kb: NotRequired[bool]
    has_vulnerability: NotRequired[bool]
    is_current: NotRequired[bool]
    product: NotRequired[Product]
    remediation_link: NotRequired[str]
    severity: NotRequired[
        Literal['LOW', 'MODERATE', 'IMPORTANT', 'CRITICAL', 'NOT_AVAILABLE', 'UNKNOWN']
    ]
    sig_name: NotRequired[str]
    signature: NotRequired[int]
    vendor: NotRequired[Vendor]
    version: NotRequired[str]
    version_data: NotRequired[VersionData]
    vulnerabilites: NotRequired[List[Vulnerabilite]]


class Result(TypedDict):
    code: NotRequired[int]
    hash: NotRequired[str]
    method: NotRequired[Literal[50700]]
    timestamp: NotRequired[str]
    timing: NotRequired[int]
    detected_product: NotRequired[DetectedProduct]


class VulnerabilityResponse(TypedDict):
    result: NotRequired[Result]
    verdict: NotRequired[int]


ScanResultEnum = Literal[0, 1, 2, 3, 4]


class YaraReport(TypedDict):
    hits: NotRequired[Dict[str, Any]]
    verdict: NotRequired[ScanResultEnum]


class ProcessingTimeDetails(TypedDict):
    av_scan_time: NotRequired[int]
    cdr_time: NotRequired[int]
    dlp_time: NotRequired[int]
    extraction_time: NotRequired[int]
    filetype_time: NotRequired[int]
    opswatfilescan_time: NotRequired[int]
    others_time: NotRequired[int]
    parse_dgsg_time: NotRequired[int]
    vul_time: NotRequired[int]
    yara_time: NotRequired[int]


class PostProcessing(TypedDict):
    actions_failed: NotRequired[str]
    actions_ran: NotRequired[str]
    converted_destination: NotRequired[str]
    converted_to: NotRequired[str]
    copy_move_destination: NotRequired[str]
    sanitization_details: NotRequired[DeepCDRDetails]


class ProcessInfo(TypedDict):
    blocked_reason: NotRequired[str]
    blocked_reasons: NotRequired[List[str]]
    file_type_skipped_scan: NotRequired[bool]
    hash_time: NotRequired[int]
    outdated_data: NotRequired[
        List[Literal['enginedefinitions', 'configuration', 'sanitization']]
    ]
    processing_time: NotRequired[int]
    processing_time_details: NotRequired[ProcessingTimeDetails]
    profile: NotRequired[str]
    progress_percentage: NotRequired[int]
    queue_time: NotRequired[int]
    result: NotRequired[str]
    user_agent: NotRequired[str]
    username: NotRequired[str]
    verdicts: NotRequired[List[str]]
    post_processing: NotRequired[PostProcessing]


class AnalysisResult(TypedDict):
    data_id: NotRequired[str]
    dlp_info: NotRequired[DLPResponse]
    download_info: NotRequired[DownloadInfo]
    extraction_info: NotRequired[ExtractionInfo]
    file_info: NotRequired[FileInformation]
    filetype_info: NotRequired[FileTypeResponse]
    opswatfilescan_info: NotRequired[OPSWATFilescanResponse]
    process_info: NotRequired[ProcessInfo]
    scan_results: NotRequired[MetascanReport]
    vulnerability_info: NotRequired[VulnerabilityResponse]
    yara: NotRequired[YaraReport]


class InvalidAPIKeyGiven(TypedDict):
    err: NotRequired[str]


class InprogressBatchClosed(TypedDict):
    err: NotRequired[str]


class BatchNotFound(TypedDict):
    err: NotRequired[str]


class BatchInstanceMismatched(TypedDict):
    err: NotRequired[str]


class BodyAndLocalFilePathGiven(TypedDict):
    err: NotRequired[str]


class RedirectLinkNotSupported(TypedDict):
    err: NotRequired[str]


class InvalidDownloadLink(TypedDict):
    err: NotRequired[str]


class InvalidProtocolDownloadLink(TypedDict):
    err: NotRequired[str]


class CallbackURLNotSupported(TypedDict):
    err: NotRequired[str]


class LicenseExpired(TypedDict):
    err: NotRequired[str]


class NoAvailableRule(TypedDict):
    err: NotRequired[str]


class InternalError(TypedDict):
    err: NotRequired[str]


class LocalFileNotFound(TypedDict):
    err: NotRequired[str]


class FileSizeExceeded(TypedDict):
    err: NotRequired[str]


class ProcessingTimeDetails1(TypedDict):
    av_scan_time: NotRequired[int]
    cdr_time: NotRequired[int]
    dlp_time: NotRequired[int]
    extraction_time: NotRequired[int]
    filetype_time: NotRequired[int]
    opswatfilescan_time: NotRequired[int]
    others_time: NotRequired[int]
    vul_time: NotRequired[int]
    yara_time: NotRequired[int]


class ProcessInfo1(TypedDict):
    blocked_reason: NotRequired[str]
    file_type_skipped_scan: NotRequired[bool]
    outdated_data: NotRequired[
        List[Literal['enginedefinitions', 'configuration', 'sanitization']]
    ]
    processing_time: NotRequired[int]
    processing_time_details: NotRequired[ProcessingTimeDetails1]
    profile: NotRequired[str]
    progress_percentage: NotRequired[int]
    queue_time: NotRequired[int]
    result: NotRequired[str]
    user_agent: NotRequired[str]
    username: NotRequired[str]
    verdicts: NotRequired[List[str]]
    post_processing: NotRequired[PostProcessing]


class ExtractedFiles2Item(TypedDict):
    data_id: NotRequired[str]
    dlp_info: NotRequired[DLPResponse]
    extraction_info: NotRequired[ExtractionInfo]
    file_info: NotRequired[FileInformation]
    filetype_info: NotRequired[FileTypeResponse]
    process_info: NotRequired[ProcessInfo1]
    scan_results: NotRequired[MetascanReport]
    vulnerability_info: NotRequired[VulnerabilityResponse]
    yara: NotRequired[YaraReport]


ExtractedFiles2 = List[ExtractedFiles2Item]


class ProcessingTimeDetails2(TypedDict):
    av_scan_time: NotRequired[int]
    cdr_time: NotRequired[int]
    dlp_time: NotRequired[int]
    extraction_time: NotRequired[int]
    filetype_time: NotRequired[int]
    opswatfilescan_time: NotRequired[int]
    others_time: NotRequired[int]
    vul_time: NotRequired[int]
    wait_child_files_time: NotRequired[int]
    yara_time: NotRequired[int]


class ProcessInfo2(TypedDict):
    blocked_reason: NotRequired[str]
    file_type_skipped_scan: NotRequired[bool]
    outdated_data: NotRequired[
        List[Literal['enginedefinitions', 'configuration', 'sanitization']]
    ]
    processing_time: NotRequired[int]
    processing_time_details: NotRequired[ProcessingTimeDetails2]
    profile: NotRequired[str]
    progress_percentage: NotRequired[int]
    queue_time: NotRequired[int]
    result: NotRequired[str]
    user_agent: NotRequired[str]
    username: NotRequired[str]
    verdicts: NotRequired[List[str]]
    post_processing: NotRequired[PostProcessing]


class ExtractedFile(TypedDict):
    data_id: NotRequired[str]
    dlp_info: NotRequired[DLPResponse]
    extracted_files: NotRequired[ExtractedFiles2]
    file_info: NotRequired[FileInformation]
    filetype_info: NotRequired[FileTypeResponse]
    process_info: NotRequired[ProcessInfo2]
    scan_results: NotRequired[MetascanReport]
    vulnerability_info: NotRequired[VulnerabilityResponse]
    yara: NotRequired[YaraReport]


ExtractedFiles = List[ExtractedFile]


class ProcessingTimeDetails3(TypedDict):
    av_scan_time: NotRequired[int]
    cdr_time: NotRequired[int]
    dlp_time: NotRequired[int]
    extraction_time: NotRequired[int]
    filetype_time: NotRequired[int]
    opswatfilescan_time: NotRequired[int]
    others_time: NotRequired[int]
    parse_dgsg_time: NotRequired[int]
    vul_time: NotRequired[int]
    wait_child_files_time: NotRequired[int]
    yara_time: NotRequired[int]


class ProcessInfo3(TypedDict):
    blocked_reason: NotRequired[str]
    file_type_skipped_scan: NotRequired[bool]
    outdated_data: NotRequired[
        List[Literal['enginedefinitions', 'configuration', 'sanitization']]
    ]
    processing_time: NotRequired[int]
    processing_time_details: NotRequired[ProcessingTimeDetails3]
    profile: NotRequired[str]
    progress_percentage: NotRequired[int]
    queue_time: NotRequired[int]
    result: NotRequired[str]
    user_agent: NotRequired[str]
    username: NotRequired[str]
    verdicts: NotRequired[List[str]]
    post_processing: NotRequired[PostProcessing]


class AnalysisResultAllExtractedFiles(TypedDict):
    data_id: NotRequired[str]
    dlp_info: NotRequired[DLPResponse]
    download_info: NotRequired[DownloadInfo]
    extracted_files: NotRequired[ExtractedFiles]
    file_info: NotRequired[FileInformation]
    filetype_info: NotRequired[FileTypeResponse]
    opswatfilescan_info: NotRequired[OPSWATFilescanResponse]
    process_info: NotRequired[ProcessInfo3]
    scan_results: NotRequired[MetascanReport]
    vulnerability_info: NotRequired[VulnerabilityResponse]
    yara: NotRequired[YaraReport]


class BatchId(TypedDict):
    batch_id: str


class ProcessInfo4(TypedDict):
    blocked_reason: NotRequired[str]
    progress_percentage: NotRequired[int]
    result: NotRequired[str]
    verdicts: NotRequired[List[str]]


class FilesInBatchItem(TypedDict):
    data_id: NotRequired[str]
    detected_by: NotRequired[int]
    display_name: NotRequired[str]
    file_size: NotRequired[int]
    file_type: NotRequired[str]
    file_type_description: NotRequired[str]
    process_info: NotRequired[ProcessInfo4]
    progress_percentage: NotRequired[int]
    scan_all_result_a: NotRequired[ProcessingResultsStringEnum]
    scan_all_result_i: NotRequired[ProcessingResultsIndexEnum]
    scanned_with: NotRequired[int]


class BatchFiles(TypedDict):
    batch_count: NotRequired[int]
    files_in_batch: NotRequired[List[FilesInBatchItem]]
    first_index: NotRequired[int]
    page_size: NotRequired[int]


class ProcessInfo5(TypedDict):
    blocked_reason: NotRequired[str]
    file_type_skipped_scan: NotRequired[bool]
    profile: NotRequired[str]
    result: NotRequired[str]
    user_agent: NotRequired[str]
    username: NotRequired[str]


class ScanResults(TypedDict):
    batch_id: NotRequired[str]
    scan_all_result_a: NotRequired[ProcessingResultsStringEnum]
    scan_all_result_i: NotRequired[ProcessingResultsIndexEnum]
    start_time: NotRequired[str]
    total_avs: NotRequired[int]
    total_time: NotRequired[int]


class BatchResponseClosed(TypedDict):
    batch_files: NotRequired[BatchFiles]
    batch_id: NotRequired[str]
    is_closed: NotRequired[bool]
    process_info: NotRequired[ProcessInfo5]
    scan_results: NotRequired[ScanResults]
    user_data: NotRequired[str]


class ProcessInfo6(TypedDict):
    blocked_reason: NotRequired[str]
    progress_percentage: NotRequired[int]
    result: NotRequired[str]
    verdicts: NotRequired[List[str]]


class FilesInBatchItem1(TypedDict):
    data_id: NotRequired[str]
    detected_by: NotRequired[int]
    display_name: NotRequired[str]
    file_size: NotRequired[int]
    file_type: NotRequired[str]
    file_type_description: NotRequired[str]
    process_info: NotRequired[ProcessInfo6]
    progress_percentage: NotRequired[int]
    scan_all_result_a: NotRequired[ProcessingResultsStringEnum]
    scan_all_result_i: NotRequired[ProcessingResultsIndexEnum]
    scanned_with: NotRequired[int]


class BatchFiles1(TypedDict):
    batch_count: NotRequired[int]
    files_in_batch: NotRequired[List[FilesInBatchItem1]]
    first_index: NotRequired[int]
    page_size: NotRequired[int]


class ProcessInfo7(TypedDict):
    blocked_reason: NotRequired[str]
    file_type_skipped_scan: NotRequired[bool]
    profile: NotRequired[str]
    result: NotRequired[str]
    user_agent: NotRequired[str]
    username: NotRequired[str]


class BatchResponseInProgress(TypedDict):
    batch_files: NotRequired[BatchFiles1]
    batch_id: NotRequired[str]
    is_closed: NotRequired[bool]
    process_info: NotRequired[ProcessInfo7]
    scan_results: NotRequired[ScanResults]
    user_data: NotRequired[str]


class Database(TypedDict):
    status: NotRequired[bool]


class License(TypedDict):
    status: NotRequired[Literal['expired', 'invalid', 'ok']]


class ScanQueue(TypedDict):
    max_number_in_queue: NotRequired[int]
    number_in_queue: NotRequired[int]
    threshold: NotRequired[int]
    status: NotRequired[bool]


class NumberActiveAvEngines(TypedDict):
    threshold: NotRequired[int]
    status: NotRequired[bool]


class Engine1(TypedDict):
    engine_id: NotRequired[str]
    required: NotRequired[bool]
    status: NotRequired[bool]


class Readyz(TypedDict):
    database: NotRequired[Database]
    license: NotRequired[License]
    scan_queue: NotRequired[ScanQueue]
    number_active_av_engines: NotRequired[NumberActiveAvEngines]
    engines: NotRequired[List[Engine1]]
